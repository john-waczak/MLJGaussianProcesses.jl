var documenterSearchIndex = {"docs":
[{"location":"","page":"Home","title":"Home","text":"CurrentModule = MLJGP","category":"page"},{"location":"#MLJGaussianProcesses","page":"Home","title":"MLJGaussianProcesses","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Documentation for MLJGaussianProcesses.","category":"page"},{"location":"","page":"Home","title":"Home","text":"","category":"page"},{"location":"","page":"Home","title":"Home","text":"Modules = [MLJGaussianProcesses]","category":"page"},{"location":"#MLJGaussianProcesses.GPR","page":"Home","title":"MLJGaussianProcesses.GPR","text":"GPR\n\nA model type for constructing a gpr, based on MLJGaussianProcesses.jl, and implementing the MLJ model interface.\n\nFrom MLJ, the type can be imported using\n\nGPR = @load GPR pkg=MLJGaussianProcesses\n\nDo model = GPR() to construct an instance with default hyper-parameters. Provide keyword arguments to override hyper-parameter defaults, as in GPR(μ=...). MLJGaussianProcesses implements Gaussian Process Regression, a non-parametric, non-linear regression model for supervised machine learning utilizing tools from the JuliaGaussianProcesses organization.\n\nTraining data\n\nIn MLJ or MLJBase, bind an instance model to data with     mach = machine(model, X, y) where\n\nX: an AbstractMatrix or Table of input features whose columns are of scitype Continuous.\n\nTrain the machine with fit!(mach, rows=...).\n\ny: a Vector of target variables of scitype Continuous.\n\nHyper-parameters\n\nμ=0: Constant value to use for mean function of Gaussian Process.\nk=default_kernel: A function k(θ) which takes parameters θ and returns a KernelFunction. default_kernel is the classic RBF kernel with variance σf², and length scale ℓ\nθ_init=θ_default: Default parameters to initialize the optimization. Defaults to θ_default = (1.0, 1.0) for the default kernel.\nσ²=1e-6: Measurement noise (variance). Must be greater than 0 to ensure stability of internal Cholesky factorization.\noptimizer:LBFGS(): Optimizer from Optim.jl.\n\nOperations\n\npredict(mach, X):  Returns a vector of normal distributions for each predicted target.\npredict_mean(mach, X): Return a vector of means from the distribution of predicted targets.\npredict_mode(mach, X): Return a vector of modes from the distribution of predicted targets.\n\nFitted parameters\n\nThe fields of fitted_params(mach) are:\n\nθ_best: A named tuple of best parameters found during GPR fit.\nσ²: The best fit for the measurement variance.\n\nReport\n\nThe fields of report(mach) are:\n\nsummary: A summary of results of the optimization.\nminimizer: The parameters that minimized the marginal log-likelihood for the GPR model.\nminimum: The minimum value of minus the marginal log-likelihood during optimization.\niterations: The number of steps taken by the optimizer\nconverged: Whether or not the optimization scheme converged in the allotted number of iterations.\n\nExamples\n\nusing MLJ\ngpr = @load GPR pkg=MLJGaussianProcesses\nmodel = gpr()\nX, y = make_regression(50, 3) # synthetic data\nmach = machine(model, X, y) |> fit!\np_y = predict(mach, X)\nŷ = predict_mean(mach, X)\nrpt = report(mach)\n\n\n\n\n\n","category":"type"}]
}
